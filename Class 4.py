# -*- coding: utf-8 -*-
"""Copy of Python Class 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JUBGvY5DQNYHyzKiidRPn0-NaoCx5iKn
"""

x=[1,2.6,3,4,5,"data",[10,20,30]]
type(x)

len(x)

x=[1,2,3,4]
y=[4,5,6]
x.append(y)
len(x)

x

x=[1,2,3,4]
y=[4,5,6]
x.extend(y)
len(x)
x

x=[11,2,3,14,5]
x.sort(reverse=True)
x

x=[11,2,3,11,11,14,5]
x.count(11)



x=[1,2,3,4,5]
y=x[2:4].copy()
print(y)
y[0]=9999
print(y)
print(x)

x=[1,2,3,4,5]
y=x[2:4].deepcopy()
print(y)
y[0]=9999
print(y)
print(x)

x=[1,2,3,4,5]
y=x  ### Shallow copy
y[0]=99999
print(y)
print(x)

x=[1,2,3,4,5]
y=x.copy()  ### Deep copy
y[0]=99999
print(y)
print(x)



x=[1,2,3,4,5,6]
x.clear()
x

x=[1,2,3,4,5,6]
x.remove(2)  ## Remove by element
x

x=[1,2,3,4,5,6]
x.pop(2) ### Remove by index
x

x=[1,2,2,3,4,"Data"]
x.reverse()
x

x=["data","abc"]
x.sort()
x

### Sets

x={1,1,1,2,2,3,4}
type(x)

x[0]=22

x=[1,2,3,4]
x[0]=222
x

x={1,2,3,4}
x[0]=222
x

### Set
    ### remove duplicates
    ### Immutable
    ### unindexed ,unordered



x={1,2,5,6,7,"data","science"}
y={1,2,5,8,9,10,"data","analytics"}
x.union(y)

x={1,2,5,6,7,"data","science"}
y={1,2,5,8,9,10,"data","analytics"}
x.intersection(y)

x={1,2,5,6,7,"data","science"}
y={1,2,5,8,9,10,"data","analytics"}
y.difference(x)

x={1,2,3,4,10,11}
y={2,3,4,5,6,7}

x

y

x.issubset(y)

x={1,2}
y={3,4}
print(x.issubset(y))
print(y.issubset(x))
print(x.issuperset(y))
print(x.isdisjoint(y))

x={1,2,3,4,5}
y={4,5,6,7,8}
x.symmetric_difference(y)

x={1,2,3,4,5}
y={4,5,6,7,8}
x.symmetric_difference_update(y)
print(x)
print(y)

x={1,2,3,4,5}
y={4,5,6,7,8}
x.difference_update(y)
print(x)
print(y)

x={1,2,3,4,5}
y={4,5,6,7,8}
x.intersection_update(y)
print(x)
print(y)

x={1,2,3,4,5,6}

x.clear()

x

x={1,2,3,4,5}
x.discard(2)
x

x={234,1112,223,4,5}
x.pop()
x



x={1,2,3,4}
x.add(2)

x

x={10,20,30}
y=x.copy()
y.add(40)
print(x)
print(y)

"""## 📝 Python Set Practice Questions

### 🔹 Basic Set Operations

1. Create a set with the values `1, 2, 3, 4` and add `5` to it.
2. Use `discard()` to remove an element from a set. What happens if the element is not present?
3. Use `remove()` to delete an element from a set. What happens if the element is not present?
4. What does the `pop()` method do in a set? Try it and explain the result.
5. How do you remove all elements from a set?

---

### 🔹 Set Operations

6. Find the **union** of two sets: `{1, 2, 3}` and `{3, 4, 5}`.
7. Find the **intersection** of sets: `{1, 2, 3}` and `{3, 4, 5}`.
8. Find the **difference** between `{1, 2, 3}` and `{3, 4, 5}`.
9. Find the **symmetric difference** between `{1, 2, 3}` and `{3, 4, 5}`.
10. Perform all of the above set operations using shorthand operators (`|`, `&`, `-`, `^`).

---

### 🔹 Set Comparisons

11. Check if `{1, 2}` is a **subset** of `{1, 2, 3}`.
12. Check if `{1, 2, 3}` is a **superset** of `{1}`.
13. Determine whether `{1, 2}` and `{3, 4}` are **disjoint** sets.

---

### 🔹 Set Functions and Behavior

14. How do you **copy** a set?
15. How do you find the **length** of a set?
16. Can a set contain **duplicate values**? Try adding duplicates and observe.
17. Can a set contain a **list**? Why or why not?
18. Convert the list `[1, 2, 2, 3]` to a set and explain the output.
19. Convert a tuple `(1, 2, 3)` to a set using `set()`.
20. What is the difference between `discard()` and `remove()`?

## 📝 Python List Practice Questions

### 🔹 Basic List Creation and Access

1. Create a list with the elements: `10, 20, 30, 40, 50`.
2. Access the third element from the list.
3. Slice the list to get the first three elements.
4. Replace the second element with `99`.
5. Append `60` to the list.

---

### 🔹 List Operations

6. Extend the list with another list `[70, 80]`.
7. Insert `25` at index 2.
8. Remove the value `30` from the list.
9. Use `pop()` to remove and return the last element.
10. Reverse the list using a method.

---

### 🔹 Searching and Counting

11. Find the index of element `40` in the list.
12. Count how many times `20` appears in the list.
13. Check if `100` is present in the list using `in`.

---

### 🔹 Sorting and Copying

14. Sort the list in ascending order.
15. Sort the list in descending order.
16. Make a shallow copy of the list using `copy()`.

---

### 🔹 List Comprehensions and Loops

17. Use list comprehension to create a list of squares from 1 to 10.
18. Create a new list with only even numbers from the original list.
19. Iterate through the list and print only numbers greater than 30.

---

### 🔹 Nested Lists

20. Create a nested list and access the second element of the second sublist:
    Example: `nested = [[1, 2], [3, 4], [5, 6]] → Output: 4`
"""

#Basic Set Operations
#Create a set with the values 1, 2, 3, 4 and add 5 to it.
Use discard() to remove an element from a set. What happens if the element is not present?
Use remove() to delete an element from a set. What happens if the element is not present?
What does the pop() method do in a set? Try it and explain the result.
How do you remove all elements from a set?

a = {1,2,3,4}
a

b=a
b.add(5)
print(b)
print(a)

b.discard(2)
b

b.discard(8)
#when we discard an element which is not present it doesnt raise an error

b.remove(3)
b

b.remove(3)
#if we remove an element which is not present it raises an error

c={1,2,3,4,5,6,7}
c.pop()
print(c)

c.pop()

c.clear()
c
#to remove all elements we use clear method

Set Operations
Find the union of two sets: {1, 2, 3} and {3, 4, 5}.
Find the intersection of sets: {1, 2, 3} and {3, 4, 5}.
Find the difference between {1, 2, 3} and {3, 4, 5}.
Find the symmetric difference between {1, 2, 3} and {3, 4, 5}.
Perform all of the above set operations using shorthand operators (|, &, -, ^).

a={1,2,3}
b={3,4,5}
a.union(b)

a.intersection(b) #displays common element

a.difference(b) #displays uncommon element

a.symmetric_difference(b) #displays uncommon element

🔹 Set Comparisons
Check if {1, 2} is a subset of {1, 2, 3}.
Check if {1, 2, 3} is a superset of {1}.
Determine whether {1, 2} and {3, 4} are disjoint sets

set1 = {1,2,3}
set2 = {1,2}
set2.issubset(set1)

set1.issuperset(set2)

set3 = {3,4}
set2.isdisjoint(set3)

set2.isdisjoint(set1)

🔹 Set Functions and Behavior
How do you copy a set?
How do you find the length of a set?
Can a set contain duplicate values? Try adding duplicates and observe.
Can a set contain a list? Why or why not?
Convert the list [1, 2, 2, 3] to a set and explain the output.
Convert a tuple (1, 2, 3) to a set using set().
What is the difference between discard() and remove()?

set4 = {33,55,77,99}
set5=set4 #shallow copy
print(set4)
print(set5)
set5.remove(55)
print(set4)
print(set5)
set6 = set4.copy() #deep copy
print(set4)
print(set6)
set6.remove(77)
print(set4)
print(set6)#difference btw shallow copy and deep copy is shallow copy can remove the element from main set but deep copy maakes own copy which is not related to main set

len(set4)

len(set6)

#set connot contain any duplicates in it but list can and set dont have any order
set7 = {1,2,22,34,34,55}
print(set7)

list1 = [1,2,2,3]
set(list1) #it removes duplicates

tuple1 = (1,2,3)
set(tuple1)
print(tuple1)

set7.discard(55)
print(set7)

set7.remove(34)
set7 #difference btw discard and remove is remove gives an error while we remove an element not present but id doesnt happen with discard

Basic List Creation and Access
Create a list with the elements: 10, 20, 30, 40, 50.
Access the third element from the list.
Slice the list to get the first three elements.
Replace the second element with 99.
Append 60 to the list.

list1=[10,20,30,40,50]
list1

list1[2]

print(list1[0:3])

list1[1]=90
list1

list1.append(60)
list1

Extend the list with another list [70, 80].
Insert 25 at index 2.
Remove the value 30 from the list.
Use pop() to remove and return the last element.
Reverse the list using a method.

list2 = [70,80]
list2

list1.extend(list2)
list1

list1[2]=25
list1

list1.remove(30)
list1

list1.pop()
list1

list1.reverse()
list1

🔹 Searching and Counting
Find the index of element 40 in the list.
Count how many times 20 appears in the list.
Check if 100 is present in the list using in.

list1.append(40)
list1

list1.sort()
list1

list1.index(40)

list1.count(20)

list1.sort()

list1

if 100 in list1:
    print("yes")
else:
    print("no")

🔹 List Comprehensions and Loops
Use list comprehension to create a list of squares from 1 to 10.
Create a new list with only even numbers from the original list.
Iterate through the list and print only numbers greater than 30.

aaa = []
for i in range(10):
  a=i*i
  aaa.append(a)
print(aaa)

bb=[]
for i in aaa:
  if i % 2 != 0:
    bb.append(i)
print(bb)

for i in aaa:
  if i > 30:
    print(i)

🔹 Nested Lists
Create a nested list and access the second element of the second sublist: Example: nested = [[1, 2], [3, 4], [5, 6]] → Output: 4

nestedd = [[1, 2], [3, 4], [5, 6]]
nestedd[1][1]

